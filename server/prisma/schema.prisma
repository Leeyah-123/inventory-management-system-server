generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(cuid()) @db.VarChar
  firstName      String  @map("first_name") @db.VarChar(20)
  lastName       String  @map("last_name") @db.VarChar(20)
  email          String  @unique @db.VarChar(255)
  phoneNumber    String  @map("phone_number") @db.VarChar(11)
  password       String  @db.VarChar(500)
  role           roles   @default(employee)
  profileImage   String? @db.VarChar(255)
  profileImageId String? @db.VarChar(255)

  @@map("Users")
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String    @unique @map("category_name") @db.VarChar(255)
  Products     Product[]

  @@map("Categories")
}

model Product {
  code           String   @id @db.VarChar(255)
  title          String   @db.VarChar(255)
  description    String?  @db.VarChar(300)
  category       String   @db.VarChar(255)
  price          Float
  brandName      String?  @map("brand_name") @db.VarChar(100)
  costPrice      Decimal  @map("cost_price") @db.Money
  quantity       Int
  purchased      Int?
  productImg     String?  @default("https://res.cloudinary.com/leeyah/image/upload/v1663003590/red-rubber-stamp-icon-on-transparent-background-vector-id918650450_ldqrym.jpg") @map("product_img") @db.VarChar(255)
  productImageId String?  @map("product_image_id") @db.VarChar(255)
  Categories     Category @relation(fields: [category], references: [categoryName], onDelete: Restrict)
  Sales          Sale[]   @relation("ProductsToSales")

  @@map("Products")
}

model Purchase {
  id             Int             @id @default(autoincrement())
  refNo          String          @unique @map("ref_no") @db.VarChar(100)
  supplierId     Int             @map("supplier_id")
  description    String          @db.VarChar(200)
  purchaseStatus purchase_status @default(pending) @map("purchase_status")
  total          Float
  paid           Float
  balance        Float?
  paymentStatus  statuses        @default(pending) @map("payment_status")
  purchaseDate   DateTime        @default(now()) @map("purchase_date") @db.Date
  Suppliers      Supplier        @relation(fields: [supplierId], references: [id], onDelete: Restrict)

  @@map("Purchases")
}

model Sale {
  id           Int      @id @default(autoincrement())
  productCode  String   @map("product_code") @db.VarChar(255)
  quantity     Int
  total        Float
  paid         Float
  balance      Float?
  salesDate    DateTime @default(now()) @map("sales_date") @db.Date
  status       statuses
  billerId     String   @map("biller_id") @db.VarChar(255)
  tax          Float
  customerName String   @map("customer_name") @db.VarChar(200)
  Products     Product  @relation("ProductsToSales", fields: [productCode], references: [code], onDelete: Restrict)

  @@map("Sales")
}

model Supplier {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(200)
  phoneNumber String     @map("phone_number") @db.VarChar(11)
  email       String     @unique @db.VarChar(255)
  address     String?    @db.VarChar(500)
  city        String     @db.VarChar(255)
  state       String     @db.VarChar(255)
  country     String     @db.VarChar(255)
  Purchases   Purchase[]

  @@map("Suppliers")
}

enum roles {
  employee
  admin
}

enum statuses {
  paid
  pending
}

enum purchase_status {
  pending
  received
}
